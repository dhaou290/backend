openapi: 3.0.1
info:
  title: backend
  description: My cool app
  version: 1.0.0
servers:
  - url: /api/v1
tags:
  - name: Backend
    description: Backend endpoints
  - name: Specification
    description: The swagger API specification
paths:







  /admin:
    get:
      tags:
        - admin
      description: trouver tous les admin
      responses:
        200:
          description: trouver tous les admin
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/admin'
        4XX:
          description: admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - admin
      description: Create a new admin
      requestBody:
        description: an admin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin'
        required: true
      responses:
        201:
          description: Return the admin with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin'
        4XX:
          description: admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/login:
    post:
      tags:
        - admin
      description: Create a new login
      requestBody:
        description: an login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
        required: true
      responses:
        201:
          description: Return the login with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login'
        4XX:
          description: login not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: login not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/{id}:
    get:
      tags:
        - admin
      parameters:
        - name: id
          in: path
          description: The id of the admin to retrieve
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Return the admin with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin'
        4XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'








  /employee:
    get:
      tags:
        - employee
      description: trouver tous les employee
      responses:
        200:
          description: trouver tous les employee
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/employee'
        4XX:
          description: employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - employee
      description: Create a new employee
      requestBody:
        description: an employee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employee'
        required: true
      responses:
        201:
          description: Return the employee with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employee'
        4XX:
          description: employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /employee/login:
    post:
      tags:
        - employee
      description: Create a new login
      requestBody:
        description: an login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
        required: true
      responses:
        201:
          description: Return the login with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login'
        4XX:
          description: login not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: login not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /employee/{id}:
    get:
      tags:
        - employee
      parameters:
        - name: id
          in: path
          description: The id of the employee to retrieve
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Return the employee with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employee'
        4XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'




  /produit:
    get:
      tags:
        - produit
      description: trouver tous les produit
      responses:
        200:
          description: trouver tous les produit
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/produit'
        4XX:
          description: produit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: produit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - produit
      description: Create a new produit
      requestBody:
        description: an produit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/produit'
        required: true
      responses:
        201:
          description: Return the produit with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/produit'
        4XX:
          description: produit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: produit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /produit/{id}:
    get:
      tags:
        - produit
      parameters:
        - name: id
          in: path
          description: The id of the produit to retrieve
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Return the produit with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/produit'
        4XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'









  /magasin:
    get:
      tags:
        - magasin
      description: trouver tous les magasin
      responses:
        200:
          description: trouver tous les magasin
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/magasin'
        4XX:
          description: magasin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: magasin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - magasin
      description: Create a new magasin
      requestBody:
        description: an magasin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/magasin'
        required: true
      responses:
        201:
          description: Return the magasin with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/magasin'
        4XX:
          description: magasin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: magasin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /magasin/{id}:
      get:
        tags:
          - magasin
        parameters:
          - name: id
            in: path
            description: The id of the magasin to retrieve
            required: true
            schema:
              type: integer
        responses:
          200:
            description: Return the magasin with the specified id
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/magasin'
          4XX:
            description: Example not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          5XX:
            description: Example not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'





  /magasin_concurrent:
    get:
      tags:
        - magasin_concurrent
      description: trouver tous les magasin_concurrent
      responses:
        200:
          description: trouver tous les magasin_concurrent
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/magasin_concurrent'
        4XX:
          description: magasin_concurrent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: magasin_concurrent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - magasin_concurrent
      description: Create a new magasin_concurrent
      requestBody:
        description: an magasin_concurrent
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/magasin_concurrent'
        required: true
      responses:
        201:
          description: Return the magasin_concurrent with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/magasin_concurrent'
        4XX:
          description: magasin_concurrent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: magasin_concurrent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /magasin_concurrent/{id}:
      get:
        tags:
          - magasin_concurrent
        parameters:
          - name: id
            in: path
            description: The id of the magasin_concurrent to retrieve
            required: true
            schema:
              type: integer
        responses:
          200:
            description: Return the magasin_concurrent with the specified id
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/magasin_concurrent'
          4XX:
            description: Example not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          5XX:
            description: Example not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'













  /inventaire:
    get:
      tags:
        - inventaire
      description: trouver tous les inventaire
      responses:
        200:
          description: trouver tous les inventaire
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inventaire'
        4XX:
          description: inventaire not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: inventaire not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - inventaire
      description: Create a new inventaire
      requestBody:
        description: an inventaire
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inventaire'
        required: true
      responses:
        201:
          description: Return the inventaire with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventaire'
        4XX:
          description: inventaire not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: inventaire not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /inventaire/{id}:
    get:
      tags:
        - inventaire
      parameters:
        - name: id
          in: path
          description: The id of the inventaire to retrieve
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Return the inventaire with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventaire'
        4XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'







  /magasinier:
    get:
      tags:
        - magasinier
      description: trouver tous les magasinier
      responses:
        200:
          description: trouver tous les magasinier
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/magasinier'
        4XX:
          description: magasinier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: magasinier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - magasinier
      description: Create a new magasinier
      requestBody:
        description: an magasinier
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/magasinier'
        required: true
      responses:
        201:
          description: Return the magasinier with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/magasinier'
        4XX:
          description: magasinier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: magasinier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /magasinier/{id}:
    get:
      tags:
        - magasinier
      parameters:
        - name: id
          in: path
          description: The id of the magasinier to retrieve
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Return the magasinier with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/magasinier'
        4XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'











  /inventaire_concurrent:
    get:
      tags:
        - inventaire_concurrent
      description: trouver tous les inventaire_concurrent
      responses:
        200:
          description: trouver tous les inventaire_concurrent
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inventaire_concurrent'
        4XX:
          description: inventaire_concurrent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: inventaire_concurrent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - inventaire_concurrent
      description: Create a new inventaire_concurrent
      requestBody:
        description: an inventaire_concurrent
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inventaire_concurrent'
        required: true
      responses:
        201:
          description: Return the inventaire_concurrent with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventaire_concurrent'
        4XX:
          description: inventaire_concurrent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: inventaire_concurrent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /inventaire_concurrent/{id}:
    get:
      tags:
        - inventaire_concurrent
      parameters:
        - name: id
          in: path
          description: The id of the inventaire_concurrent to retrieve
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Return the inventaire_concurrent with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inventaire_concurrent'
        4XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'






  /utilisateur:
    get:
      tags:
        - utilisateur
      description: trouver tous les utilisateur
      responses:
        200:
          description: trouver tous les utilisateur
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/utilisateur'
        4XX:
          description: utilisateur not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: utilisateur not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - utilisateur
      description: Create a new utilisateur
      requestBody:
        description: an utilisateur
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/utilisateur'
        required: true
      responses:
        201:
          description: Return the utilisateur with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utilisateur'
        4XX:
          description: utilisateur not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: utilisateur not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /utilisateur/{id}:
    get:
      tags:
        - utilisateur
      parameters:
        - name: id
          in: path
          description: The id of the utilisateur to retrieve
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Return the utilisateur with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utilisateur'
        4XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'




components:
  schemas:


    admin:
      type: object
      properties:
        email:
          type: string
          example: aaaaa@gmail.com
        phone:
          type: number
          example: "+21621556"
        password:
          type: string
          example: a123s1
        nom_complet:
          type: string
          example: amridhaou



    login:
      type: object
      properties:
        email:
          type: string
          example: dhaou@gmail.com
        password:
          type: string
          example: mdg5778gy         


    employee:
      type: object
      properties:
        email:
          type: string
          example: aaaaa@gmail.com
        phone:
          type: string
          example: "+21621556"
        password:
          type: string
          example: a123s1
        nom_complet:
          type: string
          example: amriidha
        nom_magasin:
          type: string
          example: mini_prix    
        lieu:
          type: string
          example: tunis


    loginn:
      type: object
      properties:
        email:
          type: string
          example: emaill
        password:
          type: string
          example: ghk455cd   


    produit:
      type: object
      properties:
        nom:
          type: string
          example: dhaou
        quantite:
          type: number
          example: 521
        codeEAN:
          type: number
          example: 35553
        labelle:
          type: string
          example: labelle
        notre_prix:
          type: number
          example: 9887




    magasin:
      type: object
      properties:
        nom_magasin:
          type: string
          example: aziza
        lieu_magasin:
          type: string
          example: sousse









    inventaire:
      type: object
      properties:
        id_inventaire:
          type: number
          example: 741258  






    inventaire_concurrent:
      type: object
      properties:
        date:
          type: string
          example: 09/04/2022
        lieu:
          type: string
          example: tafela
        nom_du_produit:
          type: string
          example: aaaaaaaa
        ean:
          type: string
          example: ean
        libelle_du_produit:
          type: string
          example: libellé
        quantite:
          type: string
          example: libellé




    magasininer:
      type: object
      properties:
        nom_magasin:
          type: string
          example: mg
        lieu_magasin:
          type: string
          example: tunis
        email:
          type: string
          example: aadt@gmail.com
        phone:
          type: string
          example: "+21629012"
        password:
          type: string
          example: xg476s
        nom_complet:
          type: string
          example: amriidhaw
          


    magasini_concurrent:
      type: object
      properties:
        nom:
          type: string
          example: mgg
        lieu:
          type: string
          example: tunisia


    utilisateur:
      type: object
      properties:
        nom_complet:
          type: string
          example: xfgfh
        phone:
          type: number
          example: 29012558
        email:
          type: string
          example: dldnldkncs@gmail.com
        password:
          type: number
          example: 684684


    Error:
      type: object
      additionalProperties: true